generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DIRECT_URL")
  directUrl = env("DIRECT_URL")
}

model account {
  id                String  @id(map: "idx_28617_primary") @db.VarChar(191)
  userid            String  @db.VarChar(191)
  type              String  @db.VarChar(191)
  provider          String  @db.VarChar(191)
  provideraccountid String  @db.VarChar(191)
  refresh_token     String?
  access_token      String?
  expires_at        BigInt?
  token_type        String? @db.VarChar(191)
  scope             String? @db.VarChar(191)
  id_token          String?
  session_state     String? @db.VarChar(191)
  ext_expires_in    BigInt?
  user              user    @relation(fields: [userid], references: [id], onDelete: Cascade)

  @@unique([provider, provideraccountid], map: "idx_28617_account_provider_provideraccountid_key")
  @@index([userid], map: "idx_28617_account_userid_fkey")
}

model category {
  id          Int           @id(map: "idx_28623_primary") @default(autoincrement())
  name        String        @db.VarChar(191)
  description String
  price       Float
  facilityid  BigInt
  facility    facility      @relation(fields: [facilityid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reservation reservation[]

  @@index([facilityid], map: "idx_28623_category_facilityid_fkey")
}

model events {
  id               String        @id(map: "idx_28629_primary") @unique(map: "idx_28629_events_id_key") @db.VarChar(191)
  calendarid       String?       @db.VarChar(191)
  title            String?       @db.VarChar(191)
  start            DateTime?     @db.Timestamptz(6)
  end              DateTime?     @db.Timestamptz(6)
  location         String?       @db.VarChar(191)
  recurringeventid String?       @db.VarChar(191)
  facilityid       BigInt
  facility         facility      @relation(fields: [facilityid], references: [id], onDelete: Cascade)
  reservation      reservation[]

  @@index([facilityid], map: "idx_28629_events_facilityid_fkey")
}

model facility {
  id               Int           @id(map: "idx_28635_primary") @default(autoincrement())
  name             String        @unique(map: "idx_28635_facility_name_key") @db.VarChar(191)
  building         String        @db.VarChar(191)
  address          String        @db.VarChar(191)
  imagepath        String?       @db.VarChar(191)
  capacity         BigInt?
  createdat        DateTime      @default(now()) @db.Timestamptz(6)
  updatedat        DateTime      @db.Timestamptz(6)
  googlecalendarid String        @unique(map: "idx_28635_facility_calendarid_key") @db.VarChar(191)
  category         category[]
  events           events[]
  reservation      reservation[]
  option           option[]      @relation("facilitytooption")
}

model insurancefiles {
  id            Int         @id(map: "idx_28643_primary")
  path          String?     @db.VarChar(191)
  filename      String?     @db.VarChar(191)
  reservationid BigInt
  varified      Boolean     @default(false)
  reservation   reservation @relation(fields: [reservationid], references: [id], onDelete: Cascade)

  @@index([reservationid], map: "idx_28643_insurancefiles_reservationid_fkey")
}

model option {
  id       Int        @id(map: "idx_28649_primary") @default(autoincrement())
  name     String     @db.VarChar(191)
  facility facility[] @relation("facilitytooption")
}

model reservation {
  id               Int                  @id(map: "idx_28654_primary") @default(autoincrement())
  userid           String               @db.VarChar(191)
  eventname        String               @db.VarChar(191)
  facilityid       BigInt
  approved         reservation_approved @default(pending)
  createdat        DateTime             @default(now()) @db.Timestamptz(6)
  updatedat        DateTime             @db.Timestamptz(6)
  details          String?              @db.VarChar(2000)
  eventid          String?              @db.VarChar(191)
  fees             Float?
  insurance        Boolean
  primarycontact   String?              @db.VarChar(191)
  responsibleparty String?              @db.VarChar(191)
  dooraccess       Boolean?
  doorsdetails     String?              @db.VarChar(191)
  name             String?              @db.VarChar(191)
  people           String?              @db.VarChar(191)
  techdetails      String?              @db.VarChar(191)
  techsupport      Boolean?
  phone            String?              @db.VarChar(191)
  categoryid       BigInt
  totalhours       Float?
  inperson         Boolean              @default(false)
  paid             Boolean              @default(false)
  paymenturl       String?              @db.VarChar(191)
  paymentlinkid    String?              @unique(map: "idx_28654_reservation_paymentlinkid_key") @db.VarChar(191)
  ticketmade       Boolean              @default(false)
  conflicts        Boolean              @default(false)
  insurancefiles   insurancefiles[]
  category         category             @relation(fields: [categoryid], references: [id])
  events           events?              @relation(fields: [eventid], references: [id], onDelete: Cascade)
  facility         facility             @relation(fields: [facilityid], references: [id])
  user             user                 @relation(fields: [userid], references: [id])
  reservationdate  reservationdate[]
  reservationfees  reservationfees[]

  @@index([categoryid], map: "idx_28654_reservation_categoryid_fkey")
  @@index([eventid], map: "idx_28654_reservation_eventid_fkey")
  @@index([facilityid], map: "idx_28654_reservation_facilityid_fkey")
  @@index([userid], map: "idx_28654_reservation_userid_fkey")
}

model reservationdate {
  id            Int                      @id(map: "idx_28667_primary") @default(autoincrement())
  startdate     String                   @db.VarChar(191)
  enddate       String                   @db.VarChar(191)
  starttime     String                   @db.VarChar(191)
  endtime       String                   @db.VarChar(191)
  reservationid BigInt
  approved      reservationdate_approved @default(pending)
  reservation   reservation              @relation(fields: [reservationid], references: [id], onDelete: Cascade)

  @@index([reservationid], map: "idx_28667_reservationdate_reservationid_fkey")
}

model reservationfees {
  id             Int         @id(map: "idx_28675_primary") @default(autoincrement())
  additionalfees Float?
  feestype       String?     @db.VarChar(191)
  reservationid  BigInt
  reservation    reservation @relation(fields: [reservationid], references: [id], onDelete: Cascade)

  @@index([reservationid], map: "idx_28675_reservationfees_reservationid_fkey")
}

model session {
  id           String   @id(map: "idx_28679_primary") @db.VarChar(191)
  sessiontoken String   @unique(map: "idx_28679_session_sessiontoken_key") @db.VarChar(191)
  userid       String   @db.VarChar(191)
  expires      DateTime @db.Timestamptz(6)
  user         user     @relation(fields: [userid], references: [id], onDelete: Cascade)

  @@index([userid], map: "idx_28679_session_userid_fkey")
}

model user {
  id            String        @id(map: "idx_28684_primary") @db.VarChar(191)
  name          String        @db.VarChar(191)
  image         String?       @db.VarChar(191)
  email         String        @unique(map: "idx_28684_user_email_key") @db.VarChar(191)
  emailverified DateTime?     @db.Timestamptz(6)
  password      String?       @db.VarChar(191)
  provider      String?       @db.VarChar(191)
  externaluser  Boolean       @default(false)
  role          user_role     @default(USER)
  createdat     DateTime      @default(now()) @db.Timestamptz(6)
  tos           Boolean       @default(false)
  account       account[]
  reservation   reservation[]
  session       session[]
}

model verificationtoken {
  identifier String   @db.VarChar(191)
  token      String   @unique(map: "idx_28693_verificationtoken_token_key") @db.VarChar(191)
  expires    DateTime @db.Timestamptz(6)

  @@unique([identifier, token], map: "idx_28693_verificationtoken_identifier_token_key")
}

enum reservation_approved {
  pending
  approved
  denied
  canceled
}

enum reservationdate_approved {
  pending
  approved
  denied
  canceled
}

enum user_role {
  CAL_ADMIN
  ADMIN_ADMIN
  GR_ADMIN
  LHS_ADMIN
  LMS_ADMIN
  WE_ADMIN
  SO_ADMIN
  SUP_ADMIN
  USER
}
